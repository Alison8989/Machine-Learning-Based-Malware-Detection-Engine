#!/usr/bin/python
# -*- coding: utf-8 -*-

#Parameters in this file

#Total feature numbers of API sequence\
total_api_seq_nums = 300

#extend some interesting feature to final API features,listed their index in the orignal feature
interesting_feature_index = [34, 67, 53, 225]  # 10个感兴趣的特征

# functions
count_dict = {}
def init_count_api_dict(lena):
    global count_dict
    if len(count_dict) > 0:
        print 'warning:the global objext has existed somewhere'
        count_dict.clear()  #清空字典
    for i in range(0,lena-2):
        for j in range(i+1,lena -1):
            for k in range(j+1,lena):
                key = '%d_%d_%d' % (i, j, k)
                count_dict[key] = [0,0,0]

def count_dict_func(feat,flag):
    global count_dict
    lena = len(feat)
    for i in range(0,lena-2):
        if feat[i] == 0:
            continue
        else:
            for j in range(i+1,lena -1):
                if feat[j] == 0:
                    continue
                else:
                    for k in range(j+1,lena):
                        if feat[k] != 0:
                            key = '%d_%d_%d'%(i,j,k)
                            if flag == 0:
                                count_dict[key][0] += 1
                            elif flag == 1:
                                count_dict[key][1] += 1
                            elif flag == 2:
                                count_dict[key][2] += 1

def sort_api_dict(num_feat):
    global count_dict

    def vgs(v):   #比较木马病毒特素的API序列差异
        c = abs(v[1] - v[2])
        return c

    blist = sorted(count_dict.items(), key=lambda x: vgs(x[1]), reverse=True)
    result_dict = {}
    i = 0
    for it in blist:
        if i < num_feat:  #获取特征个数
            result_dict[it[0]] = i  # it[0]是键值，i是当前特征的索引值
        else:
            break
        i += 1
        if  i< 10:
            print(it[0])
    return result_dict

def feature_transform(feat,result_dict):

    lena = len(feat)
    num_api_feat = total_api_seq_nums

    result_feat = [0 for i in range(num_api_feat)]  #初始化

    for (k,v) in result_dict.items():
        fun_set = k.split('_')

        temp_ret = True
        for ig in fun_set:
            ob = int(ig)
            if ob >= lena:
                raise 'value_error：API transform feature OUT of Bound'
                break
            if feat[ob] != 1:
                temp_ret = False
                break
        if temp_ret:
            result_feat[v] = 1

    return result_feat

#根据训练样本自动调整API特征
def api_feature_get(train_feat,train_y,api_start,api_end):#api_end API特征结束的位置，不包括在内
    lena = api_end - api_start
    init_count_api_dict(lena)

    for i in range(len(train_y)):
        count_dict_func(train_feat[i][api_start:api_end], train_y[i])
    result_dict = sort_api_dict(total_api_seq_nums)

    train_mal_feat =[]
    train_mal_class = []

    for i in range(len(train_y)):
        if(train_y[i] == 0):   #正常文件
            continue
        train_mal_feat.append(feature_transform(train_feat[i][api_start:api_end], result_dict))
        train_mal_class.append(train_y[i])

    return train_mal_feat,train_mal_class,result_dict




def  api_feature_get_ex(train_feat, train_y, api_start, api_end):  # 训练模型并返回训练特征
    mal_train_feat, mal_train_y, result_dict = api_feature_get(train_feat, train_y, api_start, api_end)
    m = 0
    for i in range(len(train_y)):
        if train_y[i] == 0:
            continue
        mal_train_feat[m].extend([train_feat[i][v] for v in interesting_feature_index])
        m += 1

    return mal_train_feat, mal_train_y, result_dict

def feature_transform_ex(feats,api_start, api_end,result_dict):  # 通过训练模型提取特征
    result_feat = []
    for ft in feats:
        temp = feature_transform(ft[api_start:api_end], result_dict)
        temp.extend([ft[v] for v in interesting_feature_index])
        result_feat.append(temp)
    return result_feat
