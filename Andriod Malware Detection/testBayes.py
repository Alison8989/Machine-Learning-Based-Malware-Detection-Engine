# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

from androguard.core.bytecodes import apk
import os
import os.path

import numpy as np
import random

#读取txt权限
def readTxt(filepath):
    file = open(filepath)
    
    prlist = file.read().split('\t')
    prlist.remove('')
    
    file.close()
    return list(set(prlist))

#获取所有文件的权限内容
def getPrs(filedir):
    prLists = []

    for parent,dirnames,filenames in os.walk(filedir):
        for filename in filenames:
            prLists.append(readTxt(os.path.join(filedir,filename)))

    return prLists

#将所有权限转换为字典
def handlePrs(prLists):
    prDict = {}
    
    for prList in prLists:
        for pr in prList:
            prDict[pr] = 0
            
    return prDict

#随机分成训练组和测试组
def getRamdomIndex(irange,isize):
    n = [i for i in range(irange)]
    n = random.sample(n,isize)
 
    notn = []
    for i in range(irange):
        if i not in n:
            notn.append(i)
   
    return n,notn

#训练
def trainPrs(prLists,prDict,iList):
    prTmpDict = prDict.copy()
    
    for i in iList:
        for pr in prLists[i]:
            prTmpDict[pr] += 1
    
    n = np.array(list(prTmpDict.values()))
    return n/len(iList)

#判断单个样本
def classify(prList,prDict,badPro,goodPro):
    prTmpDict = prDict.copy()
    
    for pr in prList:
        prTmpDict[pr] = 1
    
    n = np.array(list(prTmpDict.values()))
    
    bp = n*badPro
    bp[bp == 0] = 1
    
    gp = n*goodPro
    gp[gp == 0] = 1
    
    bp = sum(np.log(bp))
    gp = sum(np.log(gp))

    if bp > gp:
        return 1
    else:
        return 0

def get_permissions(path):
    app = apk.APK(path)
    permission = app.get_permissions()
    for i in range(0,len(permission)):
        permission[i] = permission[i].replace('android.permission.','')
    return permission
    
badPath = "testDB\\badSRC"
goodPath = "testDB\\goodSRC"

badPrLists = getPrs(badPath)
goodPrLists = getPrs(goodPath)

prLists = badPrLists
prLists.extend(goodPrLists)

prDict = handlePrs(prLists)


for a in range(0,10):
    n,notn = getRamdomIndex(500,400)
    
    badPro = trainPrs(badPrLists,prDict,n)
    goodPro = trainPrs(goodPrLists,prDict,n)
    
    nSum = 0
    for i in notn:
        nSum += classify(badPrLists[i],prDict,badPro,goodPro)
    
    p = nSum/100
   
    nSum = 100    
    for i in notn:
        nSum -= classify(goodPrLists[i],prDict,badPro,goodPro)
    
    p += nSum/100
    p /= 2
    print(p)

'''
prList = get_permissions("testDB\\virus")
print(classify(prList,prDict,badPro,goodPro))
'''




