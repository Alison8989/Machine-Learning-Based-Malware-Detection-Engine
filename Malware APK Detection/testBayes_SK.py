# -*- coding: utf-8 -*-
"""
Created on Mon Aug 14 14:49:29 2017

@author: Administrator
"""
import os
import os.path
import random
import numpy as np

  
from sklearn.metrics import precision_recall_curve  
from sklearn.metrics import classification_report  
from sklearn.naive_bayes import MultinomialNB

from androguard.core.bytecodes import apk
#读取txt权限
def readTxt(filepath):
    file = open(filepath)
    
    prlist = file.read().split('\t')
    prlist.remove('')
    
    file.close()
    return list(set(prlist))

#获取所有文件的权限内容
def getPrs(filedir):
    prLists = []

    for parent,dirnames,filenames in os.walk(filedir):
        for filename in filenames:
            prLists.append(readTxt(os.path.join(filedir,filename)))

    return prLists

#将所有权限转换为字典
def handlePrs(prLists):
    prDict = {}
    
    for prList in prLists:
        for pr in prList:
            prDict[pr] = 0
            
    return prDict

def getTrainAndTest(prLists,prRltList,prDict):
    data = []

    for prList,r in zip(prLists,prRltList):
        prTmpDict = prDict.copy()
        for pr in prList:
            prTmpDict[pr] = 1
        data.append([list(prTmpDict.values()),r])
    
    random.shuffle(data)
    
    filesize = int(0.8 * len(data))
    
    x_train = [each[0] for each in data[:filesize]]
    y_train = [each[1] for each in data[:filesize]]

    x_test = [each[0] for each in data[filesize:]]
    y_test = [each[1] for each in data[filesize:]]

    return x_train, y_train, x_test, y_test

def get_permissions(path):
    app = apk.APK(path)
    permission = app.get_permissions()
    for i in range(0,len(permission)):
        permission[i] = permission[i].replace('android.permission.','')
    return permission
    
badPath = "testDB\\badSRC"
goodPath = "testDB\\goodSRC"

badPrLists = getPrs(badPath)
goodPrLists = getPrs(goodPath)

prLists = badPrLists.copy()
prLists.extend(goodPrLists)

prDict = handlePrs(prLists)

prResult = [1 for i in range(0,len(badPrLists))]
prResult.extend([0 for i in range(0,len(goodPrLists))])

x_train,y_train,x_test,y_test = getTrainAndTest(prLists,prResult,prDict)

clf_pf = MultinomialNB()
clf_pf.fit(x_train, y_train)
predict = clf_pf.predict(x_test)

prList = get_permissions("testDB\\virus")

prTmpDict = prDict.copy()
for pr in prList:
    prTmpDict[pr] = 1

print(clf_pf.predict(list(prTmpDict.values())))
print(np.mean(predict == y_test))

precision, recall, thresholds = precision_recall_curve(y_test, clf_pf.predict(x_test))  
answer = clf_pf.predict_proba(x_test)[:,1]  
report = answer > 0.5  
print(classification_report(y_test, report, target_names = ['neg', 'pos']))  
